"""Django settings for trace_connect project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
from datetime import timedelta
from pathlib import Path

from . import env


ENVIRONMENT = env.get("ENVIRONMENT")
DEPLOYMENT = env.get("DEPLOYMENT")
ENTERPRISE_MODE = False

ROOT_URL = env.get("ROOT_URL")
FRONT_ROOT_URL = env.get("FRONT_ROOT_URL")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    ROOT_URL,
    "localhost",
    "127.0.0.1",
]


# Application definition

INSTALLED_APPS = [
    # Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    # External Core Libraries
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "rest_framework_simplejwt",
    # 'fcm_django',
    # External utility libraries
    "django_extensions",
    "modeltranslation",
    "phonenumber_field",
    "admin_extra_buttons",
    # Internal Apps (V1)
    "v1.accounts",
    "v1.apiauth",
    "v1.notifications",
    "v1.catalogs",
    "v1.forms",
    "v1.supply_chains",
    "v1.transactions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    # CORS header middlewares
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "base.authentication.custom_authentication.CustomAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
    "DEFAULT_THROTTLE_CLASSES": ["rest_framework.throttling.AnonRateThrottle"],
    "DEFAULT_THROTTLE_RATES": {"anon": "5/min"},
    "EXCEPTION_HANDLER": (
        "base.exceptions.exception_handler.custom_exception_handler"
    ),
    "DATETIME_FORMAT": "%s",
    "DEFAULT_PAGINATION_CLASS": (
        "rest_framework.pagination.LimitOffsetPagination"
    ),
    "PAGE_SIZE": 10,
    "DEFAULT_RENDERER_CLASSES": ("base.request_handler.response.ApiRenderer",),
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
    ),
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
}


REST_USE_JWT = True
JWT_AUTH_COOKIE = "rightorigins-v3-auth"
JWT_AUTH_REFRESH_COOKIE = "rightorigins-v3-refresh-token"

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": (
        "rest_framework_simplejwt.authentication"
        ".default_user_authentication_rule"
    ),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

ROOT_URLCONF = "trace_connect.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "trace_connect.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env.get("DB_NAME"),
        "USER": env.get("DB_USER"),
        "PASSWORD": env.get("DB_PASSWORD"),
        "PORT": "5432",
        "HOST": env.get("DB_HOST", default="localhost"),
        "DISABLE_SERVER_SIDE_CURSORS": True,
    }
}

REDIS_URL = env.get("REDIS_URL", default="redis://127.0.0.1")
REDIS_PORT = env.get("REDIS_PORT", default=6379)

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URL}:{REDIS_PORT}/1",
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
        "KEY_PREFIX": "trace_connect_django",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation"
            ".UserAttributeSimilarityValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation.MinimumLengthValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation"
            ".CommonPasswordValidator"
        ),
    },
    {
        "NAME": (
            "django.contrib.auth.password_validation"
            ".NumericPasswordValidator"
        ),
    },
]

AUTH_USER_MODEL = "accounts.CustomUser"

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_THOUSAND_SEPARATOR = True
USE_I18N = True
USE_L10N = True

USE_TZ = True

LOCALE_PATHS = (BASE_DIR / "locale",)
LANGUAGES = [
    ("en-us", "English US"),
    ("en-uk", "English UK"),
    ("fr", "French"),
    ("nl", "Dutch"),
    ("id", "Indonesian"),
]

MODELTRANSLATION_DEFAULT_LANGUAGE = "en-us"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Hash id encoding.

HASHID_SALT = env.get("HASHID_SALT")
HASHID_FIELD_SALT = env.get("HASHID_SALT")
HASHID_MIN_LENGTH = 10
HASHID_FIELD_MIN_LENGTH = 10
HASHID_ALPHABETS = "ABCDEFGHJKMNPQRSTUVWXYZ23456789"
HASHID_FIELD_ALPHABET = "ABCDEFGHJKMNPQRSTUVWXYZ23456789"
HASHID_FIELD_ALLOW_INT_LOOKUP = True
DEFAULT_AUTO_FIELD = "hashid_field.HashidAutoField"

ACCESS_TOKEN_LENGTH = 90
OTP_LENGTH = 6

# Cors setup

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_METHODS = ("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS")
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-disposition",
    "content-type",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "user-id",
    "entity-id",
    "token",
    "language",
    "timezone",
]

CORS_PREFLIGHT_MAX_AGE = 86400
CORS_ALLOW_CREDENTIALS = True

CUSTOM_INSPECTORS = [
    "base.drf.swagger.inspectors.HashidFieldInspector",
]

SWAGGER_SETTINGS = {
    "SECURITY_DEFINITIONS": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "scheme": "bearer",
        }
    },
    "DEFAULT_API_URL": ROOT_URL,
    "DEFAULT_FIELD_INSPECTORS": [
        "base.drf.swagger.inspectors.HashidFieldInspector",
        "drf_yasg.inspectors.CamelCaseJSONFilter",
        "drf_yasg.inspectors.RecursiveFieldInspector",
        "drf_yasg.inspectors.ReferencingSerializerInspector",
        "drf_yasg.inspectors.ChoiceFieldInspector",
        "drf_yasg.inspectors.FileFieldInspector",
        "drf_yasg.inspectors.DictFieldInspector",
        "drf_yasg.inspectors.JSONFieldInspector",
        "drf_yasg.inspectors.HiddenFieldInspector",
        "drf_yasg.inspectors.RelatedFieldInspector",
        "drf_yasg.inspectors.SerializerMethodFieldInspector",
        "drf_yasg.inspectors.SimpleFieldInspector",
        "drf_yasg.inspectors.StringDefaultFieldInspector",
    ],
    # 'DEFAULT_FIELD_INSPECTORS': CUSTOM_INSPECTORS + list(
    # swagger_settings.DEFAULT_FIELD_INSPECTORS),
}


# Email setup

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env.get("EMAIL_HOST")
EMAIL_PORT = env.get("EMAIL_PORT")
EMAIL_HOST_USER = env.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env.get("EMAIL_HOST_PASSWORD")
FROM_EMAIL = EMAIL_HOST_USER
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False


# celery setup

CELERY_BROKER_URL = f"{REDIS_URL}:{REDIS_PORT}"
CELERY_RESULT_BACKEND = f"{REDIS_URL}:{REDIS_PORT}"
CELERY_TIMEZONE = "UTC"
CELERY_DEFAULT_QUEUE = "low"
CELERY_ROUTES = {
    "send_email": {"queue": "high"},
    "send_sms": {"queue": "high"},
}
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

# sentry_sdk.init(
#     dsn=env.get("SENTRY_DSN"),
#     integrations=[
#         DjangoIntegration(),
#         CeleryIntegration(),
#         RedisIntegration(),
#     ],
#     traces_sample_rate=1.0,
#     environment=ENVIRONMENT,
#     _experiments={
#         "profiles_sample_rate": 1.0,
#     },
# )
# sentry_sdk.set_tag("deployment", DEPLOYMENT)
